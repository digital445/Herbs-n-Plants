@page
@using System.Reflection;
@using Plants.Models.Dto;
@using System.Drawing;
@model IndexModel
@{
	ViewData["Title"] = "Home page";
}

<div class="container mt-5">
	<div class="card">
		<div class="card-header" id="filterHeader">
			<div class="row justify-content-between">
				<div class="col col-auto">
					<button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#filterContent">
						Filter
					</button>
				</div>
				<div class="col col-auto">
					<a class="btn btn-success" href="/CreateUpdate">New Plant</a>
				</div>
			</div>
		</div>

		<div id="filterContent" class="@(Model.Filter.IsApplied ? "show" : "collapse")">
			<div class="card-body">
				<form asp-route-pageid="1" method="post">
					<div class="row mb-2" id="Name">
						<div class="col-2 d-flex align-items-center">
							Name
						</div>
						<div class="col-2">
							<input type="text" class="form-control" asp-for=Filter.Name value=@Model.Filter.Name placeholder="<enter a name>">
						</div>
					</div>
					<div class="row" id="FlowerColorCode">
						<div class="col-2 d-flex align-items-center">
							Flower Color
						</div>
						<div class="col-5">
							<div class="card p-2 bg-light">
								<div class="color-palette">
									<input type="radio" id="default" asp-for=Filter.FlowerColorCode value="-1">
									<label class="bg-light" title="Not selected" for="default">X</label>

									@foreach (var clr in Model.Palette.OrderBy(clr => clr.ColorCode))
									{
										<input type="radio" id="@clr.ColorCode" asp-for=Filter.FlowerColorCode value=@clr.ColorCode>
										<label for="@clr.ColorCode" title="@clr.Name" style="background-color: @($"#{clr.ColorCode:X6}");"></label>
									}
								</div>
							</div>
						</div>
					</div>

					@*Displaying nullBool filter properties*@
					@{
						bool?[] nullBoolValues = { true, false, null };
						var nullBoolProperties = Model.Filter.GetType().GetProperties().Where(pi => pi.PropertyType == typeof(bool?));
						foreach (PropertyInfo pi in nullBoolProperties)
						{
							<div class="row" id="@pi.Name">
								<div class="col-2">
									@pi.Name
								</div>
								<div class="col-10">
									@foreach (bool? nullBool in nullBoolValues)
									{
										<label>
											<input type="radio" name=@($"Filter.{pi.Name}") value=@(nullBool?.ToString() ?? "null") checked="@((bool?)pi.GetValue(Model.Filter) == nullBool)">
											@NullBoolFilterToString(nullBool)
										</label>
									}
								</div>
							</div>
						}
					}

					<div class="row" id="Submit">
						<div class="col-1">
							<button type="submit" class="btn btn-primary mt-3">Apply</button>
						</div>
					</div>
				</form>
				<div class="row" @(Model.Filter.IsApplied ? "" : "hidden")>
					<form method="get">
						<input type="hidden" name="reset" value="true" />
						<button class="btn btn-link" type="submit">Reset</button>
					</form>
				</div>

			</div>
		</div>
	</div>
</div>
<div class="container">
	<div class="row">
		@if (Model.TotalPages == 0)
		{
			<p>No plants found</p>
		}
		else if (Model.RequestedPlants != null)
		{
			foreach (var plant in Model.RequestedPlants)
			{
				var imageToDisplayUrl = plant.ImageLinks.FirstOrDefault(il => il.ViewType == ViewType.Flower)?.ImageUrl
					?? plant.ImageLinks.FirstOrDefault()?.ImageUrl;

				<div class="col-4 ">
					<div class="p-0 my-3 border">
						<div class="card">
							<img src="@imageToDisplayUrl" class="card-img-top fixed-card-img-top">
							<div class="card-header">
								@plant.ImageLinks.Count() Images
							</div>

							<div class="card-body">
								@foreach (var pn in plant!.Names.OrderBy(pn => pn.Language))
								{
									<h3 class="card-title text-success">@pn.Name</h3>
								}
								<div class="row">
									<div class="col">
										<p class="card-text">
											Poisonous:	@NullBoolPlantToString(plant.Poisonous)<br>
											For herbal tea: @NullBoolPlantToString(plant.ForHerbalTea)<br>
											Picking is prohibited: @NullBoolPlantToString(plant.PickingProhibited)
										</p>
									</div>
									<div class="col-3 d-flex flex-column">
										<a class="btn btn-primary mt-auto mb-1" href=@(Model.NotAuthorized ? $"/Details/{plant.PlantId}" : $"/CreateUpdate/{plant.PlantId}")>Details</a>
										<a class="btn btn-danger mt-auto" href=@($"/Delete/{plant.PlantId}") @(Model.NotAuthorized ? "hidden" : "") onclick="return confirmDelete();">Delete</a>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			}
		}
	</div>
	<div class="row" id="TotalCount">
		<div class="col-4 ">
			Total plants: @Model.TotalCount
		</div>
	</div>

	<div class="row">
		<nav aria-label="Page navigation">
			<ul class="pagination">
				<li class="page-item @(Model.HasPreviousPage ? "enabled" : "disabled")">
					<a class="page-link" asp-route-pageid="@(Model.PageId - 1)">Previous</a>
				</li>

				@for (int i = 1; i <= Model.TotalPages; i++)
				{
					<li class="page-item @(Model.PageId == i ? "active" : "")">
						<a class="page-link" asp-route-pageid="@i">@i</a>
					</li>
				}

				<li class="page-item @(Model.HasNextPage ? "enabled" : "disabled")">
					<a class="page-link" asp-route-pageid="@(Model.PageId + 1)">Next</a>
				</li>
			</ul>
		</nav>
	</div>
</div>
<script>
	function confirmDelete() {
        return confirm("Are you sure you want to delete this plant?");
    }
</script>