@page
@using Plants.Models.Dto;
@using System.Reflection;
@model Plants.Pages.CreateModel
@{
	var enumViewTypes = (ViewType[])Enum.GetValues(typeof(ViewType));
}
<div class="container mt-5">
	<div class="card">
		<div class="card-header">
			Upload a Plant
		</div>
		<div class="card-body">
			<form method="post" enctype="multipart/form-data" id="imageForm">
				<div class="row" id="imagesRow">
					<div class="col-4" id="imageTemplate" style="display: none;">
						<div class="p-0 my-3 border">
							<div class="card">
								<img src="" class="card-img-top fixed-card-img-top">
								<div class="card-body">
									@*language selector and delete button*@
									<label for="viewTypeDropdown" class="form-label">ViewType</label>
									<select name="viewType" class="form-select" id="viewTypeDropdown">
										@foreach (var vt in enumViewTypes)
										{
											<option selected="@(vt == ViewType.GeneralView)" value="@vt">@vt.ToString()</option>
										}
									</select>

									<div class="d-flex justify-content-end">
										<button type="button" class="btn btn-danger mt-2 delete-btn">Delete</button>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>

				<div class="row" id="addImageRow">
					<div class="col-4">
						<div class="p-0 my-3 border card">
							<input type="file" id="imageInput" style="display: none;" name="files" accept="image/*" multiple required>  @*The input is hidden to make the alternative button style*@
							<button type="button" class="btn btn-primary" onclick="addImages()" id="addImagesButton">Add Images</button>
						</div>
					</div>
				</div>
				

				<div id="Palette" class="border mt-2 p-2">
					<div class="row">
						<div class="col-auto d-flex">
							<h5>Flower Color</h5>
						</div>
						<div class="col-4">
							<div class="card p-2 bg-light">
								<div class="color-palette">
									<input type="radio" id="defaultColor" name="Plant.FlowerColorCode" value="-1" checked>
									<label class="bg-light" title="Not selected" for="defaultColor">X</label>

									@if (Model.Palette != null)
									{
										foreach (var clr in Model.Palette.OrderBy(clr => clr.ColorCode))
										{
											<input type="radio" id="@clr.ColorCode" name="Plant.FlowerColorCode" value=@clr.ColorCode>
											<label for="@clr.ColorCode" title="@clr.Name" style="background-color: @($"#{clr.ColorCode:X6}");"></label>
										}
									}
								</div>
							</div>
						</div>
					</div>
				</div>
				<div id="Names" class="border mt-2 p-2">
					<h5>Names</h5>
					@{
						var enumLanguages = (Language[])Enum.GetValues(typeof(Language));
						var stringLanguages = enumLanguages.Select(lng => lng.ToString());
					}
					<div class="ms-4">
						<div id="plantNamesContainer">
							<div class="plant-name row" id="plantName0">
								<div class="col-2">
									<label for="languageDropdown" class="form-label">Language</label>
									<select name="Plant.Names[0].Language" class="form-select" id="languageDropdown">
										@foreach (var lng in enumLanguages)
										{
											<option selected="@(lng == Language.Unknown)" value="@(lng)">@lng.ToString()</option>
										}
									</select>
								</div>
								<div class="col">
									<label for="nameInput" class="form-label">Name</label>
									<input type="text" name="Plant.Names[0].Name" class="form-control" id="nameInput" />
								</div>
							</div>
						</div>
						<div class="row mt-1" id="plantNamesButtons">
							<div class="col-auto">
								<button type="button" class="btn btn-primary" onclick="addPlantName()">Add</button>
							</div>
							<div class="col-auto">
								<button type="button" class="btn btn-danger" onclick="deleteLastPlantName()" id="deletePlantNameBtn" disabled>Delete</button>
							</div>
						</div>
					</div>

				</div>
				<div id="BooleanProperties" class="border mt-2 p-2">
					<h5>Properties</h5>
					@{
						bool?[] nullBoolValues = { true, false, null };
						var nullBoolProperties = typeof(PlantDto).GetProperties().Where(pi => pi.PropertyType == typeof(bool?));
						foreach (PropertyInfo pi in nullBoolProperties)
						{
							<div class="row" id="@pi.Name">
								<div class="col-2">
									@pi.Name
								</div>
								<div class="col-10">
									@foreach (bool? nullBool in nullBoolValues)
									{
										<label>
											<input type="radio" name=@($"Plant.{pi.Name}") value=@(nullBool?.ToString() ?? "null") checked="@(nullBool == null)">
											@NullBoolPlantToString(nullBool)
										</label>
									}
								</div>
							</div>
						}
					}

				</div>

				<button type="submit" class="btn btn-primary mt-1" id="submitButton">Upload</button>
				<button type="button" class="btn btn-link mt-1" onclick="resetForm()">Reset</button>
			</form>
		</div>
	</div>
</div>

<script>
	var selectedImages = {}; //The inner data supposed to be [file, imageId]
	var imageTemplate = document.getElementById('imageTemplate');
	var imageForm = document.getElementById('imageForm');
	var imgCounter = 0;
	var newPlantNameCounter = 0;

	document.getElementById('imageInput').addEventListener('change', function (event) {
		var input = event.target;

		if (input.files && input.files.length > 0) {
			for (let file of input.files) {

				let reader = new FileReader();

				reader.onload = function () {

					let newImage = imageTemplate.cloneNode('true');
					newImage.id = `image${imgCounter++}`;
					newImage.style.display = "";
					var image = newImage.querySelector('.card-img-top');
					image.src = reader.result;

					var imagesRow = document.getElementById('imagesRow');

					var selectView = newImage.querySelector('.form-select');
					selectView.addEventListener('change', function () {
						selectedImages[newImage.id][1] = selectView.value;
					});

					// Add a delete button to each image
					var deleteButton = newImage.querySelector('.delete-btn');
					deleteButton.addEventListener('click', function () {
						delete selectedImages[newImage.id];
						newImage.remove();
					});

					// Add the selected image file to the selectedImages array
					selectedImages[newImage.id] = [file, selectView.value];

					//Insert the new Image before the AddImage card
					imagesRow.appendChild(newImage);
				};
				reader.readAsDataURL(file);
			}
		}
	});

	function addImages() {
		document.getElementById('imageInput').click();
	}

	function addPlantName() {
		newPlantNameCounter++;
		var container = document.getElementById("plantNamesContainer");
		var newBlock = document.querySelector('.plant-name').cloneNode(true);
		newBlock.id = "plantName" + newPlantNameCounter;

		var labels = newBlock.querySelectorAll('label');
		for (var label of labels) {
			var oldFor = label.getAttribute("for");
			label.setAttribute("for", oldFor + newPlantNameCounter);
		}

		var languageSelect = newBlock.querySelector('select');
		languageSelect.name = `Plant.Names[${newPlantNameCounter}].Language`;
		languageSelect.id += newPlantNameCounter;

		var nameInput = newBlock.querySelector('input');
		nameInput.name = `Plant.Names[${newPlantNameCounter}].Name`;
		nameInput.value = "";
		nameInput.id += newPlantNameCounter;

		container.appendChild(newBlock);

		var deleteBtn = document.getElementById("deletePlantNameBtn");
		deleteBtn.removeAttribute("disabled");

	}

	function deleteLastPlantName() {
		var pnToDelete = document.getElementById("plantName" + newPlantNameCounter);

		if (pnToDelete) {
			pnToDelete.parentNode.removeChild(pnToDelete); // Remove the element from its parent node
			if (--newPlantNameCounter == 0) {
				var deleteBtn = document.getElementById("deletePlantNameBtn");
				deleteBtn.setAttribute("disabled", "");
			}
		}
	}

	function resetForm() {
		for (let i = 0; i < newPlantNameCounter; i++) {
			deleteLastPlantName();
		}
		for (let key in selectedImages) {
			document.getElementById(key).remove();
			delete selectedImages[key];
		}
		imgCounter = 0;
		imageForm.reset();
	}

	imageForm.addEventListener('submit', async function (event) { //??? async
		event.preventDefault();

		var initialFormData = new FormData(imageForm);
		var updatedFormData = new FormData();

		var keysArray = Object.keys(selectedImages); //Get an array of keys to preserve the order for futher iterations

		var i = 0;
		for (let key of keysArray) {
			let pair = selectedImages[key];
			updatedFormData.append('files', pair[0]);
			updatedFormData.append(`Plant.ImageLinks[${i++}].ViewType`, pair[1]);
		}

		for (let pair of initialFormData.entries()) {
			let key = pair[0];
			if (key !== 'files' && key !== 'viewType') {
				updatedFormData.append(pair[0], pair[1]);
			}
		}

		var redirectUrl = "";
		// Submit the form with the selected images and handle the response
		fetch('@Model.RouteData.Values["page"]', {
			method: 'POST',
			body: updatedFormData,
			redirect: 'follow',
		})
		.then(response => {
			if (response.ok) {
				if (response.redirected) {
					redirectUrl = response.url;
					console.log('Final URL after redirection:', redirectUrl);
					return response.text();
				}
				console.log('Form submitted successfully.');
			} else {
				console.error('Unsuccessful response:', response.statusText);
			}
		})
		.then(htmlContent => {
			document.documentElement.innerHTML = htmlContent;
			history.pushState({}, '', redirectUrl);
		})
		.catch(error => {
			console.error('Fetch error:', error);
		});		
	});
</script>
